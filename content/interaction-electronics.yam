Interaction Electronics

The Pi is a _general purpose_ computer. It runs %(http://www.gnu.org/, GNU)
%(http://www.linuxfoundation.org/, Linux)%footnote(To be picky, the Pi's
default operating system's full title would be the %(http://www.raspbian.org/,
Raspbian) distribution of %(http://www.debian.org/, Debian)
%(http://www.gnu.org/, GNU) %(http://www.linuxfoundation.org/, Linux).), which
is an operating system used in satellites and phones, desktops and tablets,
supercomputers and set-top boxes. It has graphics capabilities good enough for
full HD video, plus computational power and memory sufficient to run a web
browser or an office productivity suite. It has a good selection of standard
interconnectivity options (including ethernet, HDMI, stereo analogue sound,
and USB). Packing all of this into a very cheap, low power and low footprint
(made in the UK!) device is truly game changing.

Another game changer with the Pi is its ability to connect directly to
electronic circuits that can take readings from the physical environment and
trigger actions in that environment (and/or over the network). When you couple
a general purpose computing device with the Pi's extremely accessible
interaction electronics all sorts of projects become so simple that everyone
from school kids (Raspberry Pirates!) to absent-minded academic types can
achieve them within a short space of time. This combination of general purpose
computer with accessible electronics is a radical development.

Below we'll give *an introduction to sensing and responding with the Pi*, and
detail some projects that can be completed in a few hours with a few pounds'
worth of materials.

The Pi's connections for getting data from sensors and for activating external
gizmos are called _general purpose input output_ pins, or GPIO pins. The
simplest of these will either sense or output a small voltage (3.3 volts, not
enough to give you a shock!). We can connect simple electronic circuits to
these pins to get the Pi interacting with its environment.

The Pi's GPIO pins are accessible via various software packages, which frees
us from the tyranny of the keyboard/mouse/screen combination and allows us to
program software to read from sensors and respond to changing conditions.

Here are some example projects that will teach you how to couple the Pi's GPIO
pins with easy-to-build interaction electronics:

- %(#hello-world, controlling an LED) (hello world!) and reading from a switch
- %(#parent-alarm, hide! my parents are coming!) (a simple alarm system)
- %(#flood-alarm, a flood alarm) with text message notifications to your phone

These projects use a prototyping tool called a breadboard to get started
quickly and easily. For introductions to this way of working, and to hacker
electronics in general, see the %(#electronics, electronics section) of the
%(#resources, resources chapter).

*Disclaimer*: it is possible fry your Pi and other nasties by doing this type
of thing -- please see %(#warning, this warning) for details.
