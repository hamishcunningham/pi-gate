MoPi: Firming up the Software

%contents

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%1 The View from the Pi

The MoPi software suite is now feature complete. That means that all the
facilities which MoPi makes available on the Raspberry Pi which it is powering
are now available for testing. This post describes how this software works and
how the architecture of MoPi hangs together.

There are four main parts of the puzzle:

- A _daemon_ which runs in the background on the Pi, which is called
  %(/pages/mopi.html#simbamon, SimBaMon) (a Simple Battery Monitor). SimBaMon
  is available as a package for Raspbian, and installing it pulls in all the
  other facilities.
- An interface that communicates with the MoPi hardware over the I2C protocol.
  This interface is wrapped up as a Python API.
- A command-line tool that uses the Python API and provides a language-neutral
  portable method for talking to the board from the Pi.
- A configuration user interface that simplifies the process of setting up
  MoPi to deal with different types and numbers of batteries, and other types
  of power supply.

All of the code for these components is
%(https://github.com/hamishcunningham/pi-tronics/tree/master/simbamon,
available on GitHub), and details of how to install are available on
%(/pages/download.html, our download page). (*Note*: to run the current
version of the code you need the snapshot repository; the version in the Pi
Foundation's repository won't be updated until we make an official release.)

The rest of the post discusses each of the main elements in turn, and finishes
up with a note about monitoring the beast as it runs.


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%1 The SimBaMon Daemon

When the Pi (or any other Linux system) boots, several system services are
started that will run continuously until the machine is shut down again. These
services are called _daemons_, and this is how SimBaMon is implemented.
Following the standard naming convention, the daemon is called ^simbamond^,
and the first point of entry (used by the operating system to start, stop,
etc.) is a script that lives in
%(https://github.com/hamishcunningham/pi-tronics/blob/master/simbamon/simbamond.default,
^/etc/init.d/simbamond^). This script (which is a management type person)
calls another to do all the real work; this other (hard working type) lives in
%(https://github.com/hamishcunningham/pi-tronics/blob/master/simbamon/simbamon,
^/usr/sbin/simbamon^).

One of key features of MoPi is that it supports many different types of
batteries and many other types of power supply (from solar panels to elastic
bands!). Coping with the requirements of all these monsters needs a huge wodge
of configuration data, which (following Debian Linux convention) lives in
^/etc/default^ in a file (again, confusingly) called
%(https://github.com/hamishcunningham/pi-tronics/blob/master/simbamon/simbamond.init,
^simbamond^).%footnote(Again confusingly -- this will become a theme -- the
names of the files as they live in the source package are different from their
names when installed. If you don't like being confused, you might want to
avoid talking to computer people as a general rule. For example, the MoPi
board works on milivolts; the I2C communication uses centivolts; the user
interface uses volts; the API uses milivolts. And all for good reasons!)

Together these three script files make up a new system service that polls the
MoPi hardware every couple of seconds and shouts loudly when an electronic
shortage appears on the horizon. If no one is listening and the shortage gets
acute, the daemon tells the Pi to take a rest and issues the ^shutdown^
command.


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%1 The Python API

How do we talk to the hardware? From MoPi version 3 onwards we shifted away
from using the Pi's general-purpose GPIO pins (using a tool called WiringPi).
This worked well, but it used a pin for each bit of data that we wanted to
ship between the board and the Pi. As time went on we found more and more data
that we needed to share (and we also came across other add-on boards that use
lots of GPIO pins -- e.g. %(http://pi.gate.ac.uk/posts/2014/02/07/airpi1/,
AirPi)).

Luckily the Pi also hosts several other inter-board communication options,
including the I2C protocol, which uses only two pins, can talk to multiple
devices over the same two wires, and allows transfer of much larger amounts of
data.

There are two ways to talk over I2C from the Pi: a set of command-line tools
written in C, and a Python module. Both work, but the Python version seems to
have had more attention from Pi users and developers, and has support for
multi-byte reads (which requires a bit of hacking to get working in the C). So
we've implemented an API for MoPI in Python%footnote(And no one complained
about the whitespace rules! Who'd have thought it?!), which now lines in a
file called
%(https://github.com/hamishcunningham/pi-tronics/blob/master/simbamon/mopiapi.py,
^mopiapi.py^).

For Python programmers this code provides a natural and efficient method of
including MoPi facilities in their programs.


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%1 MoPi from the Command Line

The observant amongst you may have noticed that SimBaMon is not written in
Python%footnote(In common with most daemons, SimBaMon is written in shell
script.) -- how does the daemon talk to the board when the API is in Python?
That's where
%(https://github.com/hamishcunningham/pi-tronics/blob/master/simbamon/mopicli,
^mopcli^) comes in, which is a command-line interface to the Python API. This
script provides convenient methods for the daemon to use, or for Pi users to
query and configure the board, or for our configuration utility -- which by
amazing coincidence is described next.

To see what the beast can do, ask it for help by typing ^sudo mopicli -h^;
you'll get something like this:

%<
Usage: mopicli [-h] [options]
Version 0.2, API 0.2

Miscellaneous:
  -i          I2C bus (default: 1)
  -fv         Firmware version
  -sn         Serial number
  -h          Display this message

Status:
  -s          MoPi status word
  -sv         Verbose status
  -v          Current battery voltage in mV
  -v1/-v2     Battery #1/#2 voltage in mV

Read configuration options:
  -rc         Combined battery #1 and #2 configuration
  -rc1/-rc2   Configuration of battery #1/#2
  -rpon       Power on delay
  -rs         Shutdown delay

Write configuration options:
  -wc mV mV mV         Combined battery #1 and #2 configuration
  -wc1/-wc2 mV mV mV   Configuration of battery #1/#2
  -wpon seconds        Power on delay seconds
  -ws seconds          Shutdown delay seconds

All options may be used simultaneously. When doing so, they execute in the
  order they are listed in in this help message. However, only one of each may
  be used.
%>

As easy as pie.


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%1 Configuring Your Power Supplies

Not quite so easy, is choosing the correct voltage settings for different
battery chemistries and different combinations of cells (not to mention other
types of power supply). In each case MoPi needs to know:

- what is the approximate voltage that the battery will supply when fully
  charged
- what is the point at which we're getting low on charge (and may expect to
  run out within a few minutes or so)
- what is the minimum safe discharge voltage

The mid-point between these two voltages is is the conventional definition of
what a good level of charge is, so that's where we swap between lighting up
our RGB led in blue and lighting it in green. When we reach the low charge
point we turn the LED red, and when we reach the minimum safe discharge
voltage (or the minimum safe operating voltage if that is higher) then we
initiate shutdown.

Let's look at each of these values in more detail:

- _Fully-charged voltage_. This is equal to the fully-charged voltage of each
  cell in the battery pack multiplied by the number of cells. Like most things
  with batteries, it varies according to battery chemistry -- e.g. an Alkaline
  cell generates 1.5V; a NiMH 1.2V; a LiIon 3.7V.
- _The low charge level_. When you record the voltage delivered by a battery
  over time, most of the curves exhibit a knee shape. Before the knee voltage
  drop is reasonably slow; after the knee if drops much more sharply. We need
  to try and warn the user around the knee point, so that they have enough
  time to replace the battery before it drains completely, but not so much
  time that there is still lots of usable charge left.
- _Minimum safe discharge voltage_. This applies to all rechargeable
  batteries. If we discharge below this level, then the capacity to recharge
  will be impared. This makes it a very important factor in battery life for
  the long term, and one which we've done a lot of work to model and adapt to.
  (Ever wondered why the rechargeables that you put in your alarm clock or
  torch lasted such a short time? Most devices have no way of knowing about
  the minimum discharge level for the particular chemistry you're using!)
- _Minimum safe operating level_. MoPi uses a sophisticated microcontroller to
  analyse battery behaviour, control its LEDs and deliver data to the software
  suite running on the Pi. If the supply voltage to MoPi falls below a certain
  level (around 6.2V) then the microcontroller may terminate, or even start to
  behave unpredictably. It is very important to trap rapid voltage drop before
  it reaches this point.

To deal with all these considerations, the current version of the software
stores these values:

%<
        TYPE         CELL/FULL  MIN

  1     non-battery     9.0     6.2
  2     NiMH            1.2     0.95
  3     Alkaline        1.5     0.8
  4     Lead Acid       2.0     1.58
  5     Lithium Ion     3.7     3.0
  6     LiPo            4.2     3.0
  7     NiCd            1.2     1.1
%>

When we know what chemistry we're dealing with, and how many cells, we can
then make good guesses about where the four levels above should fall. But how
do we know what the chemistry is? Two ways:

- We have two built-in defaults, one for 8 NiMH cells (which is the battery
  pack that we're supplying to backers who requested one), and one for 8
  Alkaline non-rechargeables. The former is what MoPi will assume when running
  out of the box; the latter is activated by removing the on-board jumper
  provided for the purpose.
- You tell us! To this end we have developed a configuration UI on the Pi,
  which is the last piece in our four part software puzzle.

The configuration UI uses the same tools as the Raspberry Pi's utility
(^raspi-config^), so it should be simple and familiar, and it can be used over
all types of connections (including remote login with ^ssh^). Here's a
screenshot or three:

%image(images/mopi/config-01.png, MoPi Config UI 1, 650)

_The main entry screen._ %br %br

%image(images/mopi/config-02.png, MoPi Config UI 2, 650)

_Configuring one of the power supplies, battery chemistry._ %br %br

%image(images/mopi/config-03.png, MoPi Config UI 3, 650)

_Getting status data (there's lots more in the newest version!)._

Dive into
%(https://github.com/hamishcunningham/pi-tronics/blob/master/simbamon/mopi,
the source code here).

And now you know more about batteries than you ever wanted to -- just like me!


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%1 Monitoring

As you can imagine, figuring out how all this stuff is working and identifying
bugs and incorrect behaviour is quite a challenge. Luckily we have some great
tools to help us, one of which is %(https://mmonit.com/, Monit). This little
gem is itself a daemon, and it has facilities for one thousand and one
different types of monitoring task. You can listen to your webserver and
restart it if it fails, or check the general load of the machine you're
running on, or -- in our case -- check that the SimBaMon service is running,
and if not start it up.

To use it, all we need to do is ^sudo apt-get install monit^ in the usual way,
then edit ^/etc/monit/monitrc^. This is the config we're using to monitor
SimBaMon on one of our test rigs:

%code(lang=bash)<
###############################################################################
# monit config for simbamond, from /etc/monit/monitrc #########################

# monitoring UI (serve on port 8888 and allow connections from one IP address)
set httpd port 8888 and
  allow 192.168.1.111

# general system status
check system mopi-15
  if loadavg (1min) > 4 then alert
  if loadavg (5min) > 2 then alert
  if memory usage > 75% then alert
  if swap usage > 25% then alert
  if cpu usage (user) > 70% then alert
  if cpu usage (system) > 30% then alert
  if cpu usage (wait) > 20% then alert

# monitor simbamond
check process simbamond with pidfile /var/run/simbamond.pid
  start program = "/usr/sbin/service simbamond start" with timeout 60 seconds
  stop program  = "/usr/sbin/service simbamond stop"
  restart program = "/usr/sbin/service simbamond restart" with timeout 60 seconds
  if cpu > 60% for 2 cycles then alert
  if cpu > 80% for 5 cycles then restart
  if totalmem > 200.0 MB for 5 cycles then restart
  if children > 250 then restart
  if loadavg(5min) greater than 10 for 8 cycles then stop
  if 3 restarts within 5 cycles then timeout
  group mopi
###############################################################################
%>

You can then see what's going on by either or both of

- ^cat /var/log/monit.log^ (^grep simbamon ...^ is also useful)
- pointing your browser at ^\http://my-pi-ip-address:8888^ (if you need to
  find your IP address various methods are %(/pages/blinkip.html, discussed
  here))

This is great for keeping check on things during load testing (particularly
heavy loads which have a tendency to cause odd corner case bugs to trigger),
but it is also a great tool for maximising service availability -- the
configuration code above will restart SimBaMon within a couple of minutes
should it ever crash, for example.

Enjoy...


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%meta(summary=Hot-swap\, uninterruptible\, multi-supply mobile power for the Raspberry Pi — and unlimited outdoor adventures!,
tags=kickstarter\,batteries\,mo-pi\,pi-tronics\,pi\,raspberrypi\,gate)

*%(pages/mopi.html, Read the main article).*
