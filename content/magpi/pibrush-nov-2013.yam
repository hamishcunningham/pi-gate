PiBrush -- Painting with the Pi and XLoBorg

_Turning an accelerometer into a paint brush with the Raspberry Pi_
%%% %meta(summary=Turning an accelerometer into a paint brush with Raspberry Pi)

_%(http://pi.gate.ac.uk/pages/about.html#fred, Fred Sonnenwald) and
%(http://pi.gate.ac.uk/pages/about.html#hamish, Hamish Cunningham), November
2013_

-----------------------------------------------------------------------------
%1* About the authors

%[ |
%image(images/fred.jpg, Fred, 150)
|
%(http://sonnenwald.co.uk, Fred)
is currently completing a PhD in Civil Engineering at the
University of Sheffield.
| %]

%[ |
%image(images/hamish-headshot.jpg, Hamish, 150)
|
%(http://gate.ac.uk/hamish/, Hamish) is a Research
Professor in Computer Science 
in Sheffield currently working on various Pi-related projects at
http://Pi.GATE.ac.uk/
| %]

*Thanks* to %(http://92.27.63.80/, Bo Meson) for inspiration!
-----------------------------------------------------------------------------

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%1* Prizes!

Tell us what you would do with an XLoBorg by PiBorg for a chance to win one of
three XLoBorgs.

%(http://www.piborg.com/, PiBorg), makers of the
%(http://www.piborg.com/xloborg, XLoBorg) motion and direction sensor Pi
add-on that this project uses, are offering three prizes for the best
suggestion (in 200 words or less) for interesting things to do with the XLo.
Anatomically feasible suggestions only, please :-)

To enter, simply email info@piborg.org with subject _MagPi PiBrush_.

Good luck!

-----------------------------------------------------------------------------

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%1* Maker Culture meets Art

There is a new conjunction emerging around open hardware, maker culture, and
art. Remember how pop culture changed with the advent of punk in the late
seventies? We seem to be witnessing a similar explosion of 'garageband'
creativity in the tennies, and the Pi is proudly leading the charge for
general purpose open source devices%footnote(The Pi isn't actually _open
hardware_ at present, but it does run on _open source_ software.) in this
context. (The Pi foundation even has an _artist in residence_ --
%(http://www.raspberrypi.org/archives/4329, Rachel Rayns).)

%(http://en.wikipedia.org/wiki/List_of_open-source_hardware_projects,
Open-source hardware) allows people to make their own robots, cameras, or even
electrocardiagraph machines by downloading schematics and incorporating any
changes they need -- and, typically, free open-source software is available to
run these projects. 3D printers, laser cutters and CNC routers have helped
this adoption of the open-everything ethos%footnote(Two great books with the
same name document this movement: the fictional _Makers_ by
%(http://craphound.com/, Cory Doctorow), and
the non-fiction _Makers_ by %(http://about.me/andersonchris, Chris
Anderson).).

There are stacks of DIY projects based on the Raspberry Pi, and the flood
showns no sign of slowing. The Pi is the first general purpose device (in
contrast to the magnificent but more specialised Arduino) which is very easy
to cobble together with add-on electronics. The thriving community that has
grown up around the Pi (including this magazine) is making a huge impact, from
changes in the %(http://pi.gate.ac.uk/pages/schools.html, UK schools
curriculum) to %(http://learn.adafruit.com/onion-pi/, the Onion Pi
anti-surveillance) device, to %(http://www.dexterindustries.com/BrickPi/,
BrickPi's) new brains for old lego Robots.

This article describes the %(http://pi.gate.ac.uk/pages/pibrush.html,
PiBrush), a simple on-screen painting system that uses the
%(http://www.piborg.com/xloborg, XLoBorg) motion and direction sensor add-on
board from %(http://www.piborg.com/, PiBorg). The XLoBorg adds an
accelerometer and a magnetometer (compass) to your Pi and makes all sorts of
motion-based interaction possible -- like a
%(http://en.wikipedia.org/wiki/Kinect, Kinect) but free and open. Here's a
PiBrush picture:

%image(images/pi-brush-snap.jpg, PiBrush Snapshot, 500)

The PiBrush is an interactive art and technology exhibit (a rather grand name
for something so small!) that simulates flicking paint off the end of a
paintbrush onto canvas -- as %(http://en.wikipedia.org/wiki/Jackson_Pollock,
Jackson Pollock) famously did in the 1940s and 50s. It utilizes two Raspberry
Pis (one Model B and one Model A), one %(http://piborg.org/xloborg/, XLoBorg),
a battery pack, a display, and two Wi-Fi dongles. The Model A is held by the
user and waved around. It collects acceleration data with the XLoBorg, which
it then transmits via Wi-Fi to the Model B, which processes the data
collected into paint droplets and displays them on the screen, connected via
HDMI. Functionally it looks like this:

%image(images/pibrush/pibrush_architecture.svg, PiBrush Architecture, 500)

And here's the hardware (we may improve on the elastic band in future models
:-)). The Model A (client):

%%% %[
%%% | %(images/pibrush/modelb.jpg, %image(images/pibrush/thumbs/modelb.jpg, Model B, 200, 150)) | %(images/pibrush/modela.jpg, %image(images/pibrush/thumbs/modela.jpg, Model A, 200, 150)) |
%%% %]

%image(images/pibrush/modela.jpg, Model A, 500)

And the Model B (server):

%image(images/pibrush/modelb.jpg, Model B, 500)

(The red button on the server saves the picture and starts another.)


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%#programming
%1* The Code

The hardware for this project is fairly straightforward. The XLoBorg plugs
directly into the GPIO pins as a block on the client, and a push button simply
connects a ground and GPIO pin on the server. The software is where the
challenge lies: intermediate to advanced code to write, using Python and some
basic physics. 

The code is available on
%(https://github.com/hamishcunningham/pi-tronics/tree/master/pibrush/bin,
GitHub) and as a %(http://pi.gate.ac.uk/pages/package.html, Rasbian package in
an Ubuntu PPA). The core is in *accel\_client.py* which runs on the Model A
and *accel\_server.py* which runs on the Model B. The former reads from the
sensor and sends data across the network; the latter processes the data and
displays the output on the screen.

The server script on the Model B really does most of the work with handling the
physics simulation and the display. There's a lot that goes on it, but not a
lot of space here so let's focus on just the most interesting bit: the paint
brush physics. This is the code that controls what happens on the screen.
Everything else that happens in the code is to get us to this point. (It's
outlined on our web page!)

What we end up with are the two variables *GAY* and *GAZ*. *G*ravitational
corrected *A*cceleration in the *Y* direction and *G*ravitational corrected
*A*cceleration in the *Z* direction. They indicate horizontal and vertical
acceleration relative to the screen. It's critical information we need to
make something _happen_.

%code(lang=python,numbering=on,firstnumber=208)<
    A = numpy.linalg.norm([GAY, GAZ])
%>

Using the %(http://en.wikipedia.org/wiki/Pythagorean_theorem, Pythagorean
theorem), *A* is the total acceleration of the Model A, with respect to the
screen, ignoring gravity. We can use this number to detect roughly if we're
speeding up or slowing down, but does that move the brush?

%code(lang=python,numbering=on,firstnumber=242)<
    if fast == 1:
        VX = VX - GAY * dt * 170
        VY = VY - GAZ * dt * 170
        BX = BX + VX * dt * 120
        BY = BY + VY * dt * 120
%>

Assume we know we're moving quickly. This bit of code then is what actually
moves the virtual paint brush. However, we only have acceleration data, how do
we turn this into movement? Through something called _twice integration_.

Imagine you're in a car traveling down the motorway at 100 kph. In one hour
you will have travelled 100 km. Easy? That's integrating once, going from
velocity to displacement. Acceleration is the rate of change in velocity,
e.g. the speed at which the needle of the speedometer in the car climbs.
Now imagine accelerating at 1 kph per second. After 10 seconds you'll be going
10 kph faster, so instead of 100 kph you're now going 110 kph. Apply that to
the distance you've travelled and you have twice integration.
(Fun fact: if you kept up that acceleration, after an hour you'd be going 3,700
kph and would have traveled 36,370 km. Or almost around the Earth.)

%image(images/pibrush/twice_integration.svg, Twice Integration, 500)

Similarly, we increment the brush velocity by the acceleration, factored by the
timestep (delay between loops) to keep the animation smooth. The next
integration increments the brush position by adding on the current velocity, also
factored by the timestep. Both times there are scaling factors, 170 and 120.
These are empirical coeffecients that make it look nice, but can be thought of
as saying something like 1 pixel represents 170 meters.

%code(lang=python,numbering=on,firstnumber=251)<
        if P > 0:
            V = numpy.linalg.norm([VX, VY])
            S = S + V
            d = A * random.randint(3, 5) * 25 + V
%>

Now that the brush is moving, how to determine where the paint droplets go?
*P* is the total ammount of paint on the brush. If there's paint left we can
do something with it. Vaguely you expect that the further and faster the brush
has moved the more paint droplets. *V* is combined brush velocity, and *S* is
brush displacement. *d* is our rough estimtate of paint droplet spacing.

Paint droplets (probably) fly off due to two factors:
- %(http://www.mne.psu.edu/cimbala/Learning/Fluid/Introductory/what_is_fluid_mechanics.htm,
  Fluid mechanics). What happens when you move a glass of water too quickly.
- %(http://en.wikipedia.org/wiki/Drag_%28physics%29, Air resistance). This is
  the equivalent of wind in your face.

%image(images/pibrush/paint_factors.svg, Paint Droplet Factors, 500)

Both of these are rather complex subjects so I've lumped them together as they
produce similar results -- paint flying off the brush. *d* is made up of *A*
times a random factor (the fluid dynamics bit), and *V* is added for the air
resistance bit. The random factor is there to take into account things like
globs of paint or hairs in the brush getting tangled. 25 is the scaling factor
this time. (Only applied to acceleration as the velocity was scaled before.)

%code(lang=python,numbering=on,firstnumber=255)<
            if S > d:
                S = S - d
                # draw a droplet!
%>

Now, if the brush has travelled further than the expected paint droplet spacing
according to our simulation, we should draw a droplet! 
