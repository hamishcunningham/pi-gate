NotiPi

_Notifications via SMS Text or Twitter from the Pi_

_%(/pages/about.html#lego, Fred Sonnenwald) and
%(/pages/about.html#hamish, Hamish Cunningham), June 2013_

%contents

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%#intro
%1 Introduction

The general idea of NotiPi, or notifications, is to let the Raspberry Pi
interact with you in ways not tied to sitting in front of the monitor. That is
to say, to let you know what's going on at a distance. There are different
ways to go about this, but they all boil down to sending a bit of text to you
in some fashion so that you are aware you've received it. The Raspberry Pi is a
general purpose machine, so it is easy to take advantage of existing services
like texting phones, or Tweets.

Here we'll look at two options for texting (using the net or using a mobile
phone handset) and finish up with the Twitter option.


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%#bulk-sms
%1 Pi Texting (SMS) via a Web Service

The general idea here is that there are loads of companies out there that
offer what is called SMS gateway service. You usually see them in the form of
a webpage where you type in some text and a phone number and off it goes --
you get a message on your phone. This is the same principle as what we'll have
the Pi do, except the Pi will be using something a bit more industrial
strength.

The webpage method is a sort of end-user thing that's friendly to you and I,
but is a bit more complex to get the Pi talking to. What we want really is a
company that specializes in providing the service that those webpages use.
If you've ever received an advert on your phone via text, it's what those
guys use. (I keep getting messages about debt consolidation, annoyingly!)


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%2* BulkSMS

Unfortunately we can't just use any company that provides this service. The
Raspberry Pi is running Linux and isn't on an Intel so we need a service that's
platform and architecture independent. Browsing and googling around led us to
%(http://www.bulksms.co.uk/, BulkSMS). Sending a text with them costs about 5
pence (you have to buy at least 200 texts to send). Even better though, they
quite nicely have published documentation for their
%(https://www.bulksms.co.uk/docs/eapi/, HTTP API). This is the written
explanation of how programs can talk to their service, which in this case is
done in a way similar accessing a web-page, only using a program. Happily
there are lots of ways to do this on Linux.

To understand the API (or really any programming concept or protocol) I find
that you can approach it in two ways. You can read the documentation and piece
together what needs to be done, or you can look at some code that's already
been written and work out how that needs to be changed to do what you want it
to instead. I prefer the latter, learning from example. BulkSMS has quite a
few %(https://www.bulksms.co.uk/docs/eapi/code_samples/, code samples)
available. My strongest language of the ones they have available there is PHP
and so I dissected that one. The example is comprehensive and quite complete.

To save you the tedium of working through either the API or the example code
and here we'll provide you with a rough outline of how it works. Communication
with BulkSMS is done over an %(https://en.wikipedia.org/wiki/POST_%28HTTP%29,
HTTP POST) request. This is the sort of thing that your browser does when you
hit the "login" button on a website -- your username and password are encoded
together in a key-pair format and sent off down the tubes. The technical
details are of less interest to us than the key-pair bit. We need to craft
together the correct key-pairs (e.g. ^username=fred&password=imnottelling^) so
that BulkSMS on the other side knows what we want to do.


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%2* The key-pairs

There are 5 bits of information that BulkSMS absolutely needs to get things
done. These are as follows:

- A unique message ID (*stop\_dup\_id*). This is an integer (whole number)
 value between 1 and 2147483647.
- Your BulkSMS username (*username*).
- Your BulkSMS password (*password*).
- The message text you're sending (*message*).
- The phone number (*msisdn*). This is including the country code, but without
 the leading `+'.

All of this information is pretty easy to get a hold of. The next half of
the battle is actually sending the message.


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%2* Curl

The absolute easiest way to send a message is to use a bit of software that's
already been written. We don't need to deal with the tedious creation of HTTP
packets, we can let someone else do that bit. Again, we just need to deal with
those key-pairs. So we turn to a program called
%(http://curl.haxx.se/docs/manpage.html, curl) which is a command line utility
for HTTP and other useful things. What is of particular interest to us is that
it can do HTTP POST communications quite easily via the *--data-urlencode*
argument which takes the key=data pair as its parameter. Add one of these to
the command for each key-pair and tell curl to go after the service url,
http://www.bulksms.co.uk/eapi/submission/send_sms/2/2.0, and that's it.
Simple!

%<curl http://www.bulksms.co.uk/eapi/submission/send_sms/2/2.0 \ 
  --data-urlencode stop_dup_id="some random number" \ 
  --data-urlencode username="your username" \ 
  --data-urlencode password="your password" \ 
  --data-urlencode message="golly wow it works!" \ 
  --data-urlencode msisdn="441632960123" %>

It can be taken a step further and the whole thing can be wrapped around with
a shell script that stores your username and password and can be manipulated
from the command line a bit easier. I've written a script which does this,
%(https://github.com/hamishcunningham/pi-tronics/blob/master/bin/sendbulksms.sh,
available here). More information of shell programing with bash is available
from %(http://tldp.org/LDP/abs/html/, The Linux Documentation Project) (TLDP).
It's a bit heavy reading but it's very comprehensive.

(*Note*: you may get a warning when running the script under Raspbian, it's not
necessary, but you can make it go away by editing ^/etc/locale.gen^ and
uncommenting (delete the ^#^) with the line which has ^en\_GB.iso8859-1^ in
it. Then running sudo locale-gen. This has to do with the script changing
character encoding to the older latin1, which BulkSMS recommends to be used.
Character encoding has to do with the way letters are stored digitally.
There's no real practical difference here, but there's more info on
%(https://en.wikipedia.org/wiki/Character_encoding, Wikipedia)!)


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%#nokia-sms
%1 Pi Texting (SMS) via a Phone Handset

In the last section, we looked at sending a text over the internet. What if
isn't available? You may find yourself in situations where the ethernet cable
or the wifi doesn't reach. Well don't panic, because Linux has you covered.
A real, physical cell connection can provide a second mechanism for sending
notifications -- actually sending SMS messages on a cell phone proper.

There's a handy bit of software called %(http://gnokii.org/, gnokii) which lets
Linux, or in our case Raspbian, talk with older mobile phones. This is not
Android or Windows smartphone territory, but rather that of everyoneâ€™s favorite
candy-bar bricks of the 90s and early 00s. It's the perfect use for that old
phone you've had lying around for years, and let's face it, Nokias are
indestructable. If you don't have one they're pretty cheap these days too.
Just the sort of bit of kit you want for a fun project.


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%2* Equipment

We had an old Nokia 6230i lying around.  It uses the DKU-2 USB cable to connect
to the Pi.  Check the %(http://wiki.gnokii.org/index.php/Config, list of phones)
to see if what you already have will work.  The USB based setups are ideal, but
there are other phones with only serial cables.  To use those you'll need a USB
to RS-232 (serial) adapter.  If all you have is the phone, you can usually find
the cables and adapters you need pretty cheaply on Amazon.

You'll also need mobile service to get this to work.  A pre-paid SIM chip is
ideal as it's cheap.  We've got a giffgaff chip as they offer the cheapest SMS
rates here in England -- a mere 6p a text.  Make sure you're phone's unlocked
before you get a chip that doesn't work with it! See the Wikipedia page on
%(https://en.wikipedia.org/wiki/SIM_lock, SIM lock) for more info there to work
out what you've got.


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%2* Installing gnokii

First, install gnokii by running sudo apt-get install gnokii in a terminal and
hitting Y when prompted to conform the installation.  If you're in the default
Rasbian GUI, double clicking the LXTerminal icon on the desktop starts a
terminal.


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%2* Setting up gnokii






%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%2* I'm using Fedora!


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%2* Other resources

We're not the first ones to look into this.  We're not even the first ones to do
it with a Raspberry Pi.  Some other guides:

- http://rolfblijleven.blogspot.co.uk/2013/01/raspberry-pi-as-sms-gateway.html
- http://researchandscience.wordpress.com/tag/sms-via-raspberry-pi/
- http://www.youtube.com/watch?v=PtPzWZWHqfI

Guides with just a regular setup:

- http://www.debian.co.il/2007/12/howto-sms-gateway-with-nokia-6230i-gsm/
- http://blogs.nopcode.org/brainstorm/2006/06/27/sms-with-gnokii-and-nokia-6230i/
- http://siddharthdawara.blogspot.co.uk/2006/09/gnokii-dku-2-nokia-6230-linux.html

There are also some more generic pages which might be of use if you're having
trouble:

- http://wiki.gnokii.org/index.php/Nokia6230iConfig
- http://wiki.gnokii.org/index.php/DKU2
- https://wiki.archlinux.org/index.php/Nokia6230i

Most of this stuff is specific to the 6230i, apologies, but a bit of googling
should turn up relevent stuff for your phone too!


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%#pi-twitter
%1 Pi Messaging via Twitter

Did you bump into a lamp-post last time you walked down the street? Are you
developing hunched shoulders and a cricked neck? Do your thumbs have more
muscle on them than your arms? These are all classic signs of becoming a
twitter-head... those conversations are just so important and fast-moving that
you've got to keep track at all times.

Don't worry -- we're here for you. Your trusty Pi can tweet at you, so now you
can programme a cron script to pull data out of Google Calendar and remind you
about your Granny's birthday or your dentist appointment or whatever.

The main hoop we have to jump through to do this is _authentication_.
%(http://staffwww.dcs.shef.ac.uk/people/D.Rout/, Dom Rout) has written a
Python library to make this easier, which lives on GitHub at
https://github.com/domrout/python-twitter-wrapper

To install it, use PIP (^sudo apt-get install python-pip^ to get hold of it)
like this:

%<
pip install -e git+https://github.com/domrout/python-twitter-wrapper.git#egg=TwitterWrapper
%>

Once installed, you need a Twitter API consumer key and secret. You can get
these by logging into https://dev.twitter.com/ and setting up an application.

Once you've done that, there's a script at
https://github.com/domrout/python-twitter-wrapper/blob/master/scripts/authenticate_twitter
that requests a proper ^OAuth^ token for your application and user. It sends
you to the Twitter site wherein you can enter your username and password.

Once all of that has been done, the snippet goes like:

%<
import twitterwrapper

api = twitterwrapper.Api()

# Post an update
new_status = api.statuses.update("I'm tweeting programmatically!")

# Delete that update.
new_status.destroy()
%>

Happy tweeting -- but do try to straighten up now and then, just to keep the
blood flowing!
