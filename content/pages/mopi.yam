Mobile Pi

_Hot-swap Mobile Power for the Pi_
%meta(summary=Hot-swap Mobile Power for the Pi)

_%(about.html#hamish, Hamish Cunningham), and
%(about.html#lubo, Lubo Bontchev), August-December 2013_

%contents

%/*
TODO
- http://www.powerstream.com/AA-tests.htm
- add vlady's test script to simbamon/utils and write up in a post
- http://goddess-gate.com/projects/en/raspi/picheckvoltage
%*/

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%1 Introduction

The Pi has many advantages as a mobile platform: if the rain gets in, or a dog
eats it, a replacement doesn't break the bank, and, for a general-purpose
device, power requirements are very low.

Below we'll run through the characteristics of mobile power for the Pi, and
follow through with the design of *_MoPi_*, an add-on battery pack circuit
with Raspbian-friendly software that does lots of useful stuff for the Mobile
Pi.

There are three dimensions to the problem of mobile power for the Pi:

- _regulation_, to supply the constant 5 volts%footnote(The keen amongst you
  may know that the Pi can, in fact, run on 3.3V -- more on that later.) at up
  to around 1 amp that the (Model B) Pi requires
- _control_:  keeping a check on battery charge, switching the regulator off
  when charge is getting low, and reporting the current level to a monitor
- _monitoring_: reading level indications from %(basics.html#gpio-pins, a GPIO
  connection), reporting it to the Pi user and shutting the operating system
  down cleanly when levels get critically low

The first two of these need some special hardware; the third is written as a
software _daemon_. Here are the prototype MoPi regulator and controller
boards (click to zoom):

%[ | %\ %\ |
%(images/mopi/prototype-regulator-05.jpg,
%image(images/mopi/thumbs/prototype-regulator-05.jpg, mopi prototype 5, 200, 194))
| %\ %\ %\  |
%(images/mopi/prototype-controller-01.jpg,
%image(images/mopi/thumbs/prototype-controller-01.jpg, mopi prototype 6, 270, 195))
| %]

The software is %(http://www.fsf.org/about/what-is-free-software, open source)
(of course) and available at
%(https://github.com/hamishcunningham/pi-tronics/tree/master/simbamon, our
Pi-Tronics repository).

The next two sections discusses the %(#perfect, overall design) of MoPi and
then the %(#monitoring, monitoring software). Then we look at %(#measures,
system performance) and measure how long a Pi can run with various
configurations and battery types, and give some detail of %(#howitworks, how
it works). Finally we link to %(#batteries, sites selling batteries) and some
other %(#other, useful resources).


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%#perfect
%1 The Perfect Pack

What would the perfect Pi battery pack look like? It should be:

*Uninterruptible*. I don't want to stop work when my battery is low if I've
got a charged pack handy (or a different source of power, like a car cigarette
lighter or the like). So I'd like my battery pack to support *hot-swap* of a
new electricity supply, either a new set of batteries or some other new input.

*Eco-friendly*. One of the great things about the Pi is its low carbon
footprint. The recent ones in my lab are made in Wales, so they haven't
travelled half way around the world to reach me. The base system is
bare-bones, which encourages reuse of power supplies, monitors, cables and the
like. The power consumption is low -- particularly for the Model A, which gets
by on 300 mA or below (at 5 volts, or around 1.5 watts -- contrast this with
%(https://secure.www.upenn.edu/computing/resources/category/hardware/article/computer-power-usage,
50 watts and above) for a desktop PC!). There's no spare planet; there's no
Plan B if we destroy this one. So we definitely want to support rechargeable
batteries, and preferably not the built-in variety that are hard to recycle.

*Low cost*. Dedicated battery supplies like those sold as phone charging
devices are great, but when they no longer hold charge the whole unit has to
be recycled. Standard commodity batteries and the reusable chargers that serve
them are well-established and already present in many households. They're the
cheapest and most flexible option.

*Polite*. When you're running your laptop on battery and it runs out of juice
it gives you a nice polite warning message or two, and, when the level gets
really low, automagically shuts down the machine. This is important to allow
the operating system (e.g. %(basics.html#footnote1, Raspbian Linux) on the Pi)
to close up any open files and generally tidy the house before power
disappears. Just killing the power without warning is risky -- sometimes
nothing bad happens, but in the worst case you can end up with a machine that
won't boot and needs a complete reinstall. So I want my battery pack to signal
the Pi when levels are low, so that the Pi can shut itself down cleanly. Good
manners are important, after all :-)

(A related point: if the battery pack is going to tell the Pi when it is
getting low and needs to shut down, why not have an *on/off switch* into the
bargain? The "off" signal is also going to trigger clean shutdown, and is very
convenient when you're using the Pi in any kind of kiosk or appliance context.
Several projects have implemented this type of on/off function in its own
right -- e.g. 
%(http://lowpowerlab.com/atxraspi/, the ATX Pi supply) or the
%(http://www.susa.net/wordpress/2012/11/raspberry-pi-power-controller/, PIC
controller) -- so it is definitely a useful function to have on board.)

*Communicative*. I want to know when the battery is full, when it is starting
to get low and when it is critical. I want to be able to get those signals
both when logged in to the Pi and visually from the battery pack itself.

*Flexible*. Got a solar panel handy? I want to plug it into the circuitry and
have it drive the Pi as long as the sun shines, then let a battery take over
when the clouds come. Stuck for power but got an old laptop supply or 12 volt
car charger handy? Strip the cables, connect, and power my Pi please! Plugging
a bunch of peripherals? I want to be able to drive them all via my battery
pack. And etc.

*Robust*. I'm pretty unreliable at the best of times. When crawling through
the underbrush with a camera-equiped Pi rig
%(../2013-08-05-chasing-pine-martens.html, in search of Pine Marten lairs) I'm
very likely to plug the wrong end of the stick and end up with my foot in my
mouth, to coin a mixed metaphor or three. Over-volt and spike protection are
definitely requirements.


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%#monitoring
%1 Monitoring

There are a variety of ways that laptops communicate with and control their
batteries, including
%(http://batteryuniversity.com/learn/article/inner_workings_of_a_smart_battery,
the Smart Battery specification) (which often uses SMBus, a variant of the I2C
interface that the Pi supports). In Linux the resultant data feed is then
modelled using a power management abstraction (of which ACPI is the most
recent) and manipulated using a driver specific to the battery in use.

Sounds like a good idea? Yes, in the abstract, but implementing a new driver
is quite a job --
%(https://github.com/torvalds/linux/blob/master/drivers/acpi/battery.c, here's
one) that runs to 1200 lines of C code, for example. It is also not clear how
to do this when we have the ability to plug in batteries of different types,
which is something we really wanted to support.

What to do?

If in doubt, take the simple option. All Linux systems share the concept of a
_daemon_, which is a system-level service which gets run during operating
system startup. It is quite easy implement a battery monitor daemon that
listens on the Pi's GPIO pins for level changes signalled by the MoPi
microcontroller board. The daemon then makes entries in the standard system
logs as a simple way to share data with other subsystems, and can be
configured to send a warning message to all users if levels are low. Best of
all, the daemon can easily shut down the Pi cleanly before the regulator
voltage gets too low for reliable operations.

The rest of this section describes the implementation of the daemon. It is
designed for the MoPi boards, but should be quite easily reusable for other
battery power projects.


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%#simbamon
%2 SimBaMon: a Simple Battery Monitor daemon

SimBaMon is an open source Linux daemon for

- monitoring battery levels (on the Pi this is done via
  %(http://wiringpi.com/the-gpio-utility/, the ^gpio^ command))
- sending warning messages to the user if the battery is low
- shutting down cleanly at critical battery levels
- managing a power supply on/off switch
- writing relevant data to the system logs

You can find
%(https://github.com/hamishcunningham/pi-tronics/tree/master/simbamon,
the source code) on GitHub. The core of the daemon is defined in three files:

- ^/etc/simbamon.conf^    -- configuration data
- ^/usr/sbin/simbamon^    -- the daemon itself
- ^/etc/init.d/simbamond^ -- an interface to the ^init^ subsystem that Linux
  uses to manage daemons (amongst other things)

The last of these, ^simbamond^, is used by the operating system to start and
stop SimBaMon at boot or shutdown time, and can be used to control the daemon
manually when required. For example this command will stop the daemon:

%code(lang=Bash)<
sudo service simbamon stop
%>

The configuration file, ^simbamon.conf^, defines a set of states in which the
monitor will take some action:

%code(lang=Bash)<
POWER_OFF=1     # the user has pressed the power button, shutdown now
BAT_SHUTDOWN=2  # the battery is just about empty, shutdown now
BAT_CRITICAL=3  # the battery level is critically low, shutdown in a shortly
BAT_WARNING=4   # the battery is low, warn the user
BAT_FULL=7      # the battery is full
%>

The MoPi microcontroller board supplies these states via three Raspberry Pi
%(basics.html#gpio-intro, GPIO pins) (and also sets on-board indicator LEDs
accordingly). The core of SimBaMon, a shell script that lives in
^/usr/sbin/simbamon^, implements an infinite loop that checks the levels being
reported over GPIO every few seconds and takes any necessary action:

%code(lang=Bash)<
while :
do
  # check the level
  BAT_LEVEL_BASE2=`gpio read ${IO_A}``gpio read ${IO_B}``gpio read ${IO_C}`
  BAT_LEVEL=`echo "ibase=2;${BAT_LEVEL_BASE2}" |bc`

  # make a log message if the level is low
  [ $BAT_LEVEL -le $BAT_WARNING ] && \
    logger "simbamon: battery is at or below warning level (${BAT_LEVEL})"

  # check for action states
  if   [ $BAT_LEVEL -eq $POWER_OFF ]
  then
    wall <<< "simbamon: power off requested: shutting down now!"
    shutdown -h now
  elif [ $BAT_LEVEL -eq $BAT_SHUTDOWN ]
  then
    wall <<< "simbamon: battery empty: shutting down now!!!"
    shutdown -h now
  elif [ $BAT_LEVEL -eq $BAT_CRITICAL ]
  then
    wall <<< \
      "simbamon: battery critical! shutting down in ${SHUT_DELAY} seconds!"
    sleep $SHUT_DELAY
    shutdown -h now
  elif [ $BAT_LEVEL -eq $BAT_WARNING ]
  then
    wall <<< "simbamon: battery is low! connect new battery or shut down"
    sleep $WARNING_INTERVAL
  fi

  # take a break
  sleep ${MONITOR_FREQUENCY}
done &
%>

The three GPIO pins connected to MoPi are used as a 3-bit binary value, which
we convert to decimal using the ^bc^ command. The ^wall^ (write all) command
is used to send messages to any logged in user.

Here is the full
%(https://github.com/hamishcunningham/pi-tronics/blob/master/simbamon/simbamon,
current version of the code). There is a full test rig, including debug mode
(no shutdowns, shorter intervals) and simulation mode (GPIO input is
simulated).


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%#installing
%3 Installing SimBaMon

The battery monitor software is available from an Ubuntu Personal Package
Archive (PPA).%footnote(The main archive (for stable releases) is at
https://launchpad.net/~hamish-dcs/+archive/pi-gate with a development snapshot
archive at %(https://launchpad.net/~hamish-dcs/+archive/pi-gate-snapshots).)
To install from this archive:

*1.* Add this line to /etc/apt/sources.list:

%code(lang=Bash)<
deb http://ppa.launchpad.net/hamish-dcs/pi-gate/ubuntu precise main
%>

You can use a text editor (e.g. nano) to do this, or paste this one-liner into
a terminal prompt:

%code(lang=Bash)<
echo deb http://ppa.launchpad.net/hamish-dcs/pi-gate/ubuntu precise main |sudo tee -a /etc/apt/sources.list
%>

*2.* Import the %(http://www.gnupg.org/, GPG) encryption key from Ubuntu so
that the Pi can verify the package's validity:

%code(lang=Bash)<
sudo apt-key adv --recv-keys --keyserver keyserver.ubuntu.com --recv-key 6C12C1CF
%>

*3.* Update your list of available packages (this may take a couple of
minutes):

%code(lang=Bash)<
  sudo apt-get update
%>

*4.* Install the package:

%code(lang=Bash)<
  sudo apt-get install simbamond
%>

And that's it!

Note: the above gets you the most recent stable release; if you want to live
on the edge, you can get more recent experimental builds by adding the
snapshot PPA to your sources list, e.g.:

%code(lang=Bash)<
echo deb http://ppa.launchpad.net/hamish-dcs/pi-gate-snapshots/ubuntu precise main |sudo tee -a /etc/apt/sources.list
%>


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%#measures
%1 Testing and Troubleshooting

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%2 The Longer Lasting Snack

So, how long will the batteries last? My first test was a Model B Pi with
almost no load (USB keyboard and mouse; monitor attached over HDMI but
switched off after starting the test; no network or other peripherals). Using
eight rechargeable Duracell AA NiMH 2400 mAh batteries (like
%(http://www.amazon.co.uk/Duracell-Rechargeable-Accu-2400-Batteries/dp/B0031OE6LG/ref=sr_1_2?ie=UTF8&qid=1375768484&sr=8-2&keywords=duracell+nimh,
these ones)) the Pi ran for 9 hours 31 minutes. Not bad! Especially when you
consider that the MoPi regulator supports hot-swap of new charged packs this
looks very viable for mobile Pi applications of all shapes and sizes.

For comparison I set up the same rig with a USB battery pack from RS
(%(http://uk.rs-online.com/web/p/power-banks/7757508/, this one), a 5200 mAh
Lithium polymer model). The results were remarkably similar, with the RS pack
lasting for 9 hours and 21 minutes.

Watch this space for the results of further tests...

%%% TODO


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%2 Troubleshooting

In early testing we often reached states that caused error conditions of one
sort or another on the Pi. For example:

- the red power indicator LED may blink if the battery charge is very low and
  it is failing to drive the Pi (and if the microcontroller is not properly
  shutting down the regulator)
- the green indicator LED repeatedly blinks three times when the ^loader.bin^
  bootloader file is not present -- in our case this was because a hard
  power shutdown caused corruption of the SD card

In cases like these the Embedded Linux wiki page on
%(http://elinux.org/R-Pi_Troubleshooting, RPI troubleshooting) is your friend!

Another useful part of the Pi-oneer's toolkit is the excellent
%(http://www.raspberrypi.org/archives/4100, NOOBS) setup from the Pi
foundation, which makes it easier to restore your SD card after failures.

But inevitably the life of electronics prototyping brings its fair share of
mystery -- why have my GPIO monitoring interface pins all gone low, all of a
sudden, when the indicator LED and the microcontroller still works? Cue much
head scratching and serious faces. Followed by a session with the debug header
and the diagnostics rig on the microcontroller -- and it turns out that a
single page of memory (which happenned to contain the code running the IO
pins) has been wiped, presumably by power fluctuations at the low battery
state. Time to add some more diodes!

And here's an amusing gotcha:

- Step 1: have the bright idea of reusing the _battery totally empty_ state as
  the _shutdown button pressed_ state.
- Step 2: implement the code changes in the daemon and install.
- Step 3: oops, my Pi just shut down. Hmmm.
- Step 4: oh yeah, that's also the default state of the GPIO pins when the
  MoPi rig isn't connected. Ah. That means that my Pi is going to shutdown
  every time I start it up. And Lubo just took the prototype boards back to
  the lab. Um. Looks like the _Donkey of the Day_ award is coming my way
  again.
- Step 5: waste half an hour remembering how to mount the SD card read-write
  on another machine and manually editing the daemon.

We learn from our mistakes -- that's why I make as many as possible.

Finally, the current author has found it useful to run around in circles,
screaming and shouting. (It doesn't fix the electronics, of course, but if
you're lucky it generates sympathy in those around you, or at least a desire
on their part to give you a beer to shut you up.)


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%#howitworks
%1 How It Works

The MoPi circuitry consists of two parts: a single-chip microcontroller and a
five volt switching mode regulator. The microcontroller with embedded firmware
implements all the functions of MoPi related to battery voltage level
monitoring, level signalling (via the LEDs and the GPIO interface), and on/off
switching of the +5V supply to the Pi. Battery voltage levels are measured
using the built-in microcontroller ADC%footnote(ADC: Analogue to Digital
Converter.). Two yellow LEDs are positioned next to the battery pack (etc.)
inputs, and indicate their status (blinking when either voltage is critically
low). The overall voltage level of both power inputs is indicated by one RGB
(three colour) LED and is also sent to the Raspberry Pi over three GPIO lines.
The 5 volts to the Pi is generated by a highly efficient switch mode voltage
stabilizer, driven by the microcontroller. An open source daemon running on
the Pi listens to the GPIO signal, informs the user of low battery levels and
shuts the Pi down cleanly when levels are critically low or when the power
switch is pressed.

To start the 5V generator the power button should be pressed and held for 3
seconds. The microcontroller checks the voltage level of the attached battery
packs and if it is above the defined operating margin, it switches the
stabilizer on to generate and send 5V to the Pi. The LED for the battery (or
other) power input that is being used for the supply lights up, and the RGB
LED lights up blue when the battery pack is fully charged or green if the
voltage level is within the acceptable operating range. A three-bit coded
voltage level is also sent to the Pi over GPIO%footnote(MoPi uses
%(http://wiringpi.com/, WiringPi) pins 4, 5 and 6.). During operation, the
microcontroller continuously monitors the voltage level, and when it falls
beneath a safe level it switches the RGB LED to red. Simultaneously the yellow
LED for the low battery starts flashing, indicating that the pack needs
replacement.

The Pi daemon gets a low battery signal and informs the user that they should
either plug in another supply or shut down (by pressing the power button for 3
seconds). If nothing changes and the battery continues to discharge down to a
critical level, then the RGB LED starts flashing red and MoPi forces a
shutdown after a short delay. If the user wishes to continue to work and
connects a new, charged battery pack (or other supply) to the second connector
within 30 seconds then the new battery will prevent the shutdown, and the RGB
LED will switch back to blue or green. The new input's corresponding yellow
LED will light up. The user can then remove the old battery pack for charging.


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%#batteries
%1 Batteries, Holders and Chargers

Here are links to some of the batteries, battery holders and chargers that
we've been testing MoPi with:

From %(http://rs-online.com/, RS Components):
- %(http://uk.rs-online.com/web/p/aa-rechargeable-batteries/6170773/,
  RS AA NiMH battery, 1.2V 2600 mAh)
- %(http://uk.rs-online.com/web/p/battery-chargers-aaa-aa-c-d-9-volt/0383241/,
  UK plugtop AA/AAA charger 250 mA)

From %(http://uk.farnell.com/, Farnell):
- %(http://uk.farnell.com/multicomp/bt00839/battery-holder-8xaa-pk5/dp/3829583,
  x8 AA battery holder)
- %(http://uk.farnell.com/duracell/5000394065710/battery-nimh-1-2v-2400mah-pk4/dp/1330278,
  Duracell AA NiMH 2400 mAh 4-pack)
- %(http://uk.farnell.com/energizer/635429/battery-precision-ni-mh-aa-2400mah/dp/2075715,
  Energiser AA NiMH 2400 mAh 4-pack)
- %(http://uk.farnell.com/ansmann/5107343-uk/charger-basic-4-plus/dp/1294240,
  x4 AA battery charger)

From %(http://maplin.co.uk/, Maplin):
- %(http://www.maplin.co.uk/extra-high-capacity-nimh-rechargeable-battery-value-packs-46414,
  NiMH AA 2400 mAh 8-pack)
- %(http://www.maplin.co.uk/hybrid-the-next-generation-rechargeable-battery-219932, 
  Hybrid AA 2100 mAh 4-pack)
- %(http://www.maplin.co.uk/batteries-and-power/batteries/battery-chargers, AA
  chargers)
- %(http://www.maplin.co.uk/aa-size-battery-holders-31427, x8 AA battery
  holder RK44X)


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%#other
%1 Other Directions

For voltage regulation another option is a UBEC%footnote(UBEC stands for
Universal Battery Elimination Circuit, which is rather a misnomer as they're
often used to regulate battery supplies. Hey ho.) -- a device popular with
radio-controlled aircraft people, and hence nice and light-weight, but also
fairly cheap, e.g.:
%(http://www.giantshark.co.uk/hobbywing-3amp-ubec-p-402342.html, this one),
%(http://www.modelaccessories.co.uk/hobbywing-3amp-ubec.html, this one) or
%(http://www.hobbyking.co.uk/hobbyking/store/uh_viewItem.asp?idProduct=28160,
this one). UBECs are switched-mode regulators, just like our MoPi regulator
board, so they don't waste power when converting high DC to 5 volt DC.

Some other useful links about Pi battery projects:
%(http://www.raspberrypi-spy.co.uk/2013/02/running-a-raspberry-pi-from-6-aa-batteries/,
Raspberry Spy),
%(http://www.raspberrypiforums.com/forums/tutorials/article/17-how-to-portably-power-your-raspberry-pi-with-a-battery/,
Raspberry Pi Forums).

%(http://www.amazon.co.uk/Raspberry-Pi-Manual-practical-revolutionary/dp/0857332953/,
Gray Girling's Pi owners' manual) also has a good discussion about battery
supplies and their subtleties (and is generally an excellent investment for
the Pi enthusiast).
