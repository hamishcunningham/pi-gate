Mobile Pi

_Battery packs for Pi-Mobility_

_%(about.html#hamish, Hamish Cunningham), and Lubo Bontchev, August 2013_

%contents

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%1 Introduction

The Pi has many advantages as a mobile platform: if the rain gets in, or a dog
eats it, a replacement doesn't break the bank, and, for a general-purpose
device, power requirements are very low.

Below we'll run through the characteristics of mobile power for the Pi, and
follow through with the design of _MoPi_, an add-on battery pack circuit with
Raspbian-friendly software that does lots of useful stuff for the Mobile Pi.

There are three dimensions to the problem of mobile power for the Pi:

- _regulation_, to supply the constant 5 volts at up to around 1 amp that the
  (Model B) Pi requires
- _control_:  keeping a check on battery charge, switching the regulator off
  when charge is getting low, and reporting the current level to a monitor
- _monitoring_: reading level indications from %(basics.html#gpio-pins, a GPIO
  connection), reporting it to the Pi user and shutting the operating system
  down cleanly when levels get critically low

The first two of these need some special hardware; the third is written as a
software _daemon_. Here are prototype regulator and controller boards:

%[ | %\ %\ |
%(images/mopi/prototype-regulator-05.jpg,
%image(images/mopi/thumbs/prototype-regulator-05.jpg, mopi prototype 5))
| %\ %\ %\  |
%(images/mopi/prototype-controller-01.jpg,
%image(images/mopi/thumbs/prototype-controller-01.jpg, mopi prototype 6))
| %]

The software is %(http://www.fsf.org/about/what-is-free-software, open source)
(of course) and available at
%(https://github.com/hamishcunningham/pi-tronics/tree/master/simbamon, our
Pi-Tronics repository).

The next section discusses the design of the boards and the daemon software.


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%1 The Perfect Pack

What would the perfect Pi battery pack look like? 

TODO


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%1 Monitoring

When your're running your laptop on battery and it runs out of juice it gives
you a nice polite warning message or two, and, when the level gets really low,
automagically shuts down the machine. This is important to allow the operating
system (e.g. %(basics.html#footnote1, Raspbian Linux) on the Pi) to close up
any open files or other resources and generally tidy the house before power
disappears. Just killing the power without warning is risky -- sometimes
nothing bad happens, but in the worst case you can end up with a machine that
won't boot and needs a complete reinstall.

There are a variety of ways that laptops communicate with and control their
batteries, including
%(http://batteryuniversity.com/learn/article/inner_workings_of_a_smart_battery,
the Smart Battery specification) (which often uses SMBus, a variant of the I2C
interface that the Pi supports). In Linux the data is then modelled using a
power management abstraction (of which ACPI is the most recent) and
manipulated using a driver specific to the battery in use.

Sounds like a good idea? Yes, in the abstract, but implementing a new driver
is quite a job --
%(https://github.com/torvalds/linux/blob/master/drivers/acpi/battery.c, here's
one) that runs to 1200 lines of C code, for example. It is also not clear how
to do this when we have the ability to plug in batteries of different types,
which is something we really wanted to support.

What to do?

If in doubt, take the simple option. All Linux systems share the concept of a
_daemon_, which is a system-level service which gets run during operating
system startup. It is quite easy implement a battery monitor daemon that
listens on the Pi's GPIO pins for level changes signalled by the MoPi
microcontroller board. The daemon then makes entries in the standard system
logs as a simple way to share data with other subsystems, and can be
configured to send a warning message to all users if levels are low. Best of
all, the daemon can easily shut down the Pi cleanly before the regulator
voltage gets too low for reliable operations.

The rest of this section describes the implementation of the daemon. It is
designed for the MoPi boards, but should be quite easily reusable for other
battery power projects.


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%2 SimBaMon: a Simple Battery Monitor daemon

https://github.com/hamishcunningham/pi-tronics/tree/master/simbamon


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%1 Testing and Troubleshooting

So, how long will the batteries last? My first test was a Model B Pi with
almost no load (USB keyboard and mouse; monitor attached over HDMI but
switched off after starting the test; no network or other peripherals). Using
eight rechargeable Duracell AA NiMH 2400 mAh batteries (like
%(http://www.amazon.co.uk/Duracell-Rechargeable-Accu-2400-Batteries/dp/B0031OE6LG/ref=sr_1_2?ie=UTF8&qid=1375768484&sr=8-2&keywords=duracell+nimh,
these ones)) the Pi ran for 9 hours 31 minutes. Not bad! Especially when you
consider that the MoPi regulator supports hot-swap of new charged packs this
looks very viable for mobile Pi applications of all shapes and sizes.

For comparison I set up the same rig with a USB battery pack from RS
(%(http://uk.rs-online.com/web/p/power-banks/7757508/, this one), a 5200 mAh
Lithium polymer model). The results were remarkably similar, with the RS pack
lasting for 9 hours and 21 minutes.


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%2 Troubleshooting

In early testing we often reach states that cause error conditions of one sort
or another on the Pi. For example

- the red power indicator LED may blink if the battery charge is very low and
  it is failing to drive the Pi (and if the microcontroller is not properly
  shutting down the regulator)
- the green indicator LED repeatedly blinks three times when the ^loader.bin^
  bootloader file is not present -- in our case this was because a hard
  power shutdown caused corruption of the SD card

In cases like these the Embedded Linux wiki page on
%(http://elinux.org/R-Pi_Troubleshooting, RPI troubleshooting) is your friend!

Another useful part of the Pi-oneer's toolkit is the excellent
%(http://www.raspberrypi.org/archives/4100, NOOBS) setup from the Pi
foundation, which makes it easier to restore your SD card after failures.

And here's an amusing gotcha:

- Step 1: have the bright idea of reusing the _battery totally empty_ state as
  the _shutdown button pressed_ state.
- Step 2: implement the code changes in the daemon and install.
- Step 3: oops, my Pi just shut down. Hmmm.
- Step 4: oh yeah, that's also the default state of the GPIO pins when the
  MoPi rig isn't connected. Ah. That means that my Pi is going to shutdown
  every time I start it up. Um.
- Step 5: waste half an hour remembering how to mount the SD card read-write
  on another machine and manually editing the daemon.

We learn from our mistakes -- that's why I make as many as possible.

Finally, the current author has found it useful to run around in circles,
screaming and shouting. (It doesn't fix the electronics, of course, but if
you're lucky it generates sympathy in those around you, or at least a desire
on their part to give you a beer to shut you up.)
