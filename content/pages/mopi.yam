MoPi: Hot-Swap Mobile Power for the Pi

%/* _
%(about.html#hamish, Hamish Cunningham),
%(about.html#lubo, Lubo Bontchev),
and %(about.html#fred, Fred Sonnenwald),
%br August 2013 -- June 2014_ %*/

%1* MoPi is mobile, hot-swap and 24/7 power for the Raspberry Pi. %br
%(/pages/get-mopi.html, I want one! \(how to order\))

_(In early 2014 we ran a %(http://tinyurl.com/mobile-pi, Kickstarter campaign)
to fund the first production version, which is due for delivery in June 2014.
If you missed it, you can %(/pages/get-mopi.html, join our pre-order waiting
list here).)_

%meta(summary=Hot-Swap\, Mobile and 24/7 Power for the Pi)

%contents

_[A huge thank you to Bo Meson, Fred Sonnenwald, Gen Gorrell, Vladimir
Marinov, Georgi Marinov, Louise Illien, Julian Briggs, Caroline Ivimey-Parr,
Angus Roberts, Joe Polifroni, Todor Primov, and all our
%(https://www.kickstarter.com/projects/hamishcunningham/mopi-mobile-and-24-7-power-for-the-raspberry-pi/backers,
Kickstarter backers)!]_


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%1 Pi to Go!

MoPi is mobile and 24/7 power for the Pi. On your bike, up a tree, or for your
home server: we've got you covered.

%%% %(images/mopi/logo-heli-1.png,
%%% %image(images/mopi/logo-heli-1-200x150.png, MoPi Heli Logo, 200, 150))

Features:

- multiple inputs -- standard batteries, car power sockets, old laptop
  supplies, solar panels, ...
- hot-swap power replacement without stopping work
- shutdown the Pi cleanly when batteries discharge
- integrated on/off switch
- UPS (uninterruptible power) when using both batteries and mains
- on-board LED indicators and on-Pi notifications

And it even fits in the Pibow (and other well-known Pi cases):

%(images/mopi/mopi-in-pibow.jpg,
%image(images/mopi/mopi-in-pibow-500x375.jpg, MoPi in a Pibow, 500, 375))


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%1 Quick Start

%image(images/mopi/quickstart/schematic6-500x.png, Quick start guide)


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%#userguide
%1 User Guide

%#warnings
%2 Warnings!!!

- DO NOT plug MoPi onto your Pi while the Pi is powered up!
- DO NOT touch electronic components when they're powered up -- you may
  damage them, or burn your fingers!
- AVOID handling circuit boards when charged with static!
- DO NOT feed MoPi to your dog, eat nuts if you're allergic to them, or lose
  your sense of humour.%footnote(A lawyer questioning a doctor during a trial:
  %br
Q: "Doctor, before you performed the autopsy, did you check for a pulse?" %br
A: "No." %br
Q: "Did you check for blood pressure?" %br
A: "No." %br
Q: "Did you check for breathing?" %br
A: "No." %br
Q: "So, then, it is possible that the patient was alive when you began the
autopsy?" %br
A: "No." %br
Q: "How can you be so sure, doctor?" %br
A: "Because his brain was sitting on my desk in a jar." %br
Q: "But could the patient have still been alive nevertheless?" %br
A: "It is possible that he could have been alive and practicing law
somewhere.")


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%2 Installation

If you're in a hurry see the graphic above, and:

# Install the battery monitoring software:
  - sudo apt-get update
  - sudo apt-get install simbamond
# Connect the batteries
# Connect the Pi and hit "on"

For more details on each step, see below.


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%3 Installing the Software

A more cautious recipe is to update your firmware and the operating system,
and to reboot between each step:

- sudo apt-get update
- sudo apt-get dist-upgrade
- sudo reboot
- sudo rpi-update
- sudo reboot
- sudo apt-get install simbamond
- sudo reboot


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%3 Connecting the Power and the Raspberry Pi

Next connect one or more power supply to MoPi using the screw terminals, and
gently push fit MoPi onto your Raspberry Pi's GPIO pins.

The components on the MoPi are as follows:

%image(images/mopi/mopi-with-key-schematic-500x.png, Board connections schematic 1,
500)

When connecting two power sources (e.g. two battery packs, or one solar panel
and one battery pack) the ground wires (typically black) both share the middle
connector on the screw terminals on the underside of the board. The live wires
(typically red) then get one each of the other connectors. The lower of these
in the schematics corresponds to _source 1_; the other to _source 2_.

%image(images/mopi/mopi-with-key-schematic-02-500x.png, Board connections schematic
2, 500)

The charge level of each source is signalled by the two amber LEDs on the top
of the board.


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%3 Turn On, Turn Off

When the Pi is powered off, press the power button for 3 seconds to turn it
on.

When the Pi is powered on, press the power button for 3 seconds to turn it
off. This will shut the Pi down cleanly, which can take up to around 30
seconds. If you hold the power button down for 10 seconds, the power will shut
down immediately.


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%2 Troubleshooting

- If you get a message like "libkmod: ERROR ../libkmod/libkmod.c:554
  kmod_search_moddep: could not open moddep file
  '/lib/modules/3.6.11+/modules.dep.bin'" when installing try a reboot
  followed by "sudo apt-get -f install".
- If the I2C bus appears not to be working after installing SimBaMon, try a
  reboot (as sometimes the Python SMBus module appears not to load as
  predicted).


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%1 Background: Mobile Pi Power

The Pi has many advantages as a mobile platform: if the rain gets in, or a dog
eats it, a replacement doesn't break the bank, and, for a general-purpose
device, power requirements are very low.

Below we'll run through the characteristics of mobile power for the Pi, and
follow through with the design of *_MoPi_*, an add-on battery pack circuit
with Raspbian-friendly software that does lots of useful stuff for the Mobile
Pi.

There are three dimensions to the problem of mobile power for the Pi:

- _regulation_, to supply the constant 5 volts%footnote(The keen amongst you
  may know that the Pi can, in fact, run on 3.3V -- more on that later.) at up
  to around 1 amp that the (Model B) Pi requires
- _control_:  keeping a check on battery charge, switching the regulator off
  when charge is getting low, and reporting the current level to a monitor
- _monitoring_: reading level indications from %(basics.html#gpio-pins, a GPIO
  connection), reporting it to the Pi user and shutting the operating system
  down cleanly when levels get critically low

The first two of these need some special hardware; the third is written as a
software _daemon_. This is the second-generation prototype board:

%%% TODO better pic
%image(images/mopi/proto2-01-500x379.jpg, mopi prototype 2/1, 500, 379)

And here are the first-generation prototype boards (with separate regulator
and controller; click to zoom):

%[ | %\ %\ |
%(images/mopi/prototype-regulator-05.jpg,
%image(images/mopi/thumbs/prototype-regulator-05.jpg, mopi prototype 5, 200, 194))
| %\ %\ %\  |
%(images/mopi/prototype-controller-01.jpg,
%image(images/mopi/thumbs/prototype-controller-01.jpg, mopi prototype 6, 270, 195))
| %]

The software is %(http://www.fsf.org/about/what-is-free-software, open source)
(of course) and available at
%(https://github.com/hamishcunningham/pi-tronics/tree/master/simbamon, our
Pi-Tronics repository).

The basic functionality is all in place; future developments include:

- dealing with more rechargeable battery chemistries (we currently support
  Alkaline and NiMH; Lithium-ion is in progress)
- the internal Pi circuitry can run on 3.3 volts (saving some power loss in
  the on-board linear regulator -- %(http://www.daveakerman.com/, Dave
  Akerman's balloons) use this strategy to increase battery life); we'd love
  to add a mode that supports 3.3V
- the communication is currently one-way: MoPi tells the Pi about the state of
  the batteries, signals for shutdown requests and so on -- if we add 2-way
  communication (on the I2C bus) then we'll be able to support configuration
  from the Pi
- to support the widest range of battery options we can't do charging; it
  would be nice to add an option for charging common configurations

Watch this space!

The next two sections discusses the %(#perfect, overall design) of MoPi and
then the %(#monitoring, monitoring software). Then we look at %(#measures,
system performance) and measure how long a Pi can run with various
configurations and battery types, and give some detail of %(#howitworks, how
it works). Finally we link to %(#batteries, sites selling batteries) and some
other %(#other, useful resources).


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%#perfect
%1 The Perfect Pack

What would the perfect Pi battery pack look like? It should be:

*Uninterruptible*. I don't want to stop work when my battery is low if I've
got a charged pack handy (or a different source of power, like a car cigarette
lighter or the like). So I'd like my battery pack to support *hot-swap* of a
new electricity supply, either a new set of batteries or some other new input.

*Eco-friendly*. One of the great things about the Pi is its low carbon
footprint. The recent ones in %(http://pi.gate.ac.uk/, my lab) are made in
Wales, so they haven't travelled half way around the world to reach me. The
base system is bare-bones, which encourages reuse of power supplies, monitors,
cables and the like. The power consumption is low -- particularly for the
Model A, which gets by on 300 mA or below (at 5 volts this adds up to around
1.5 watts -- contrast that with
%(https://secure.www.upenn.edu/computing/resources/category/hardware/article/computer-power-usage,
50 watts and above) for a desktop PC!). There's no spare planet; there's no
Plan B if we destroy this one. So we definitely want to support rechargeable
batteries, and preferably not the built-in variety that are hard to recycle.

*Low cost*. Dedicated battery supplies like those sold as phone charging
devices are great, but when they no longer hold charge the whole unit has to
be recycled. Standard commodity batteries and the reusable chargers that serve
them are well-established and already present in many households. They're the
cheapest and most flexible option.

*Polite*. When you're running your laptop on battery and it runs out of juice
it gives you a nice polite warning message or two, and, when the level gets
really low, it automagically shuts down the machine. This is important to
allow the operating system (e.g. %(basics.html#footnote1, Raspbian Linux) on
the Pi) to close up any open files and generally tidy the house before power
disappears. Just killing the power without warning is risky -- sometimes
nothing bad happens, but in the worst case you can end up with a machine that
won't boot and needs a complete reinstall. So I want my battery pack to signal
the Pi when levels are low, so that the Pi can shut itself down cleanly. Good
manners are important, after all :-)

(A related point: if the battery pack is going to tell the Pi when it is
getting low and needs to shut down, why not have an *on/off switch* into the
bargain? The "off" signal is also going to trigger clean shutdown, and is very
convenient when you're using the Pi in any kind of kiosk or appliance context.
Several projects have implemented this type of on/off function in its own
right -- e.g. 
%(http://lowpowerlab.com/atxraspi/, the ATX Pi supply) or the
%(http://www.susa.net/wordpress/2012/11/raspberry-pi-power-controller/, PIC
controller) -- so it is definitely a useful function to have on board.)

*Communicative*. I want to know when the battery is full, when it is starting
to get low and when it is critical. I want to be able to get those signals
both when logged in to the Pi and visually from the battery pack itself.
(Look! Flashing lights!)

*Flexible*. Got a solar panel handy? I want to plug it into the circuitry and
have it drive the Pi as long as the sun shines, then let a battery take over
when the clouds come. Stuck for power but got an old laptop supply or 12 volt
car charger handy? Strip the cables, connect, and power my Pi please! Plugging
a bunch of peripherals? I want to be able to drive them all via my battery
pack. And etc.

*Robust*. I'm pretty unreliable at the best of times. When crawling through
the underbrush with a camera-equiped Pi rig
%(../2013-08-05-chasing-pine-martens.html, in search of Pine Marten lairs) I'm
very likely to plug the wrong end of the stick and end up with my foot in my
mouth, to coin a mixed metaphor or three. Over-volt and spike protection are
definitely requirements.


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%#monitoring
%1 Monitoring

There are a variety of ways that laptops communicate with and control their
batteries, including the
%(http://batteryuniversity.com/learn/article/inner_workings_of_a_smart_battery,
Smart Battery specification) (which often uses SMBus, a variant of the I2C
interface that the Pi supports). In Linux the resultant data feed is then
modelled using a power management abstraction (of which ACPI is the most
recent) and manipulated using a driver specific to the battery in use.

Sounds like a good idea? Yes, in the abstract, but implementing a new driver
is quite a job --
%(https://github.com/torvalds/linux/blob/master/drivers/acpi/battery.c, here's
one) that runs to 1200 lines of C code, for example. It is also not clear how
to do this when we have the ability to plug in batteries of different types,
which is something we really wanted to support.

What to do?

If in doubt, take the simple option. All Linux systems share the concept of a
_daemon_, which is a system-level service which gets run during operating
system startup. It is quite easy to implement a battery monitor daemon that
listens on the Pi's GPIO pins for level changes signalled by the MoPi
microcontroller board. The daemon then makes entries in the standard system
logs as a simple way to share data with other subsystems, and can be
configured to send a warning message to all users if levels are low. Best of
all, the daemon can easily shut down the Pi cleanly before the regulator
voltage gets too low for reliable operation.

The rest of this section describes the implementation of the daemon. It is
designed for the MoPi boards, but should be quite easily reusable for other
battery power projects.


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%#simbamon
%2 SimBaMon: a Simple Battery Monitor daemon

SimBaMon is an open source Linux daemon for

- monitoring battery levels (on the Pi this is done via
  %(http://wiringpi.com/the-gpio-utility/, the ^gpio^ command))
- sending warning messages to the user if the battery is low
- shutting down cleanly at critical battery levels
- managing a power supply on/off switch
- writing relevant data to the system logs

You can find
%(https://github.com/hamishcunningham/pi-tronics/tree/master/simbamon,
the source code) on GitHub. The core of the daemon is defined in three files:

- ^/etc/simbamon.conf^    -- configuration data
- ^/usr/sbin/simbamon^    -- the daemon itself
- ^/etc/init.d/simbamond^ -- an interface to the ^init^ subsystem that Linux
  uses to manage daemons (amongst other things)

The last of these, ^simbamond^, is used by the operating system to start and
stop SimBaMon at boot or shutdown time, and can be used to control the daemon
manually when required. For example this command will stop the daemon:

%code(lang=Bash)<
sudo service simbamond stop
%>

The configuration file, ^simbamon.conf^, defines a set of states in which the
monitor will take some action:

%code(lang=Bash)<
POWER_OFF=1     # the user has pressed the power button, shutdown now
BAT_SHUTDOWN=2  # the battery is just about empty, shutdown now
BAT_CRITICAL=3  # the battery level is critically low, shutdown shortly
BAT_WARNING=4   # the battery is low, warn the user
BAT_FULL=7      # the battery is full
%>

The MoPi microcontroller supplies these states via three Raspberry Pi
%(basics.html#gpio-intro, GPIO pins) (and also sets on-board indicator LEDs
accordingly). The core of SimBaMon, a shell script that lives in
^/usr/sbin/simbamon^, implements an infinite loop that checks the levels being
reported over GPIO every few seconds and takes any necessary action. The three
GPIO pins connected to MoPi are used as a 3-bit binary value, which we convert
to decimal using the ^bc^ command. The ^wall^ (write all) command is used to
send messages to any logged in user.

Here's the main loop:

%code(lang=Bash)<
while :
do
  # check the level
  BAT_LEVEL_BASE2=`gpio read ${IO_A}``gpio read ${IO_B}``gpio read ${IO_C}`
  BAT_LEVEL=`echo "ibase=2;${BAT_LEVEL_BASE2}" |bc`

  # make a log message if the level is low
  [ $BAT_LEVEL -le $BAT_WARNING ] && \
    logger "simbamon: battery is at or below warning level (${BAT_LEVEL})"

  # check for action states
  if   [ $BAT_LEVEL -eq $POWER_OFF ]
  then
    wall <<< "simbamon: power off requested: shutting down now!"
    halt
  elif [ $BAT_LEVEL -eq $BAT_SHUTDOWN ]
  then
    wall <<< "simbamon: battery empty: shutting down now!!!"
    halt
  elif [ $BAT_LEVEL -eq $BAT_CRITICAL ]
  then
    wall <<< \
      "simbamon: battery critical! shutting down in ${SHUT_DELAY} seconds!"
    sleep $SHUT_DELAY
    halt
  elif [ $BAT_LEVEL -eq $BAT_WARNING ]
  then
    wall <<< "simbamon: battery is low! connect new battery or shut down"
    sleep $WARNING_INTERVAL
  fi

  # take a break
  sleep ${MONITOR_FREQUENCY}
done &
%>

Here is the
%(https://github.com/hamishcunningham/pi-tronics/blob/master/simbamon/simbamon,
current version of the code). There is a full test rig, including debug mode
(no shutdowns, shorter intervals) and simulation mode (GPIO input is
simulated).


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%#installing
%3 Installing SimBaMon

The %(http://www.raspberrypi.org/archives/tag/alex-bradbury, Raspbian
maintainers) have been kind enough to include SimBaMon in their repository, so
you can just do this:

%code(lang=Bash)<
  sudo apt-get install simbamond
%>

SimBaMon depends on Gordon Henderson's %(http://wiringpi.com/, Wiring Pi), and
we've %(http://pi.gate.ac.uk/posts/2013/10/09/wiring-pi-package/, made a
Raspbian package) for that library which should be in the Foundation
repository by the time you read this.

Our software is also available from an
%(https://launchpad.net/~hamish-dcs/+archive/pi-gate, Ubuntu Personal Package
Archive) (PPA). (The Ubuntu infrastructure doesn't currently work for binary
Pi packages, but SimBaMon is implemented in script, so we're ok in this
case.)%footnote(The main archive (for stable releases) is at
https://launchpad.net/~hamish-dcs/+archive/pi-gate with a development snapshot
archive at %(https://launchpad.net/~hamish-dcs/+archive/pi-gate-snapshots).)
To install from this archive:

*1.* Add this line to /etc/apt/sources.list:

%code(lang=Bash)<
deb http://ppa.launchpad.net/hamish-dcs/pi-gate/ubuntu precise main
%>

You can use a text editor (e.g. nano) to do this, or paste this one-liner into
a terminal prompt:

%code(lang=Bash)<
echo deb http://ppa.launchpad.net/hamish-dcs/pi-gate/ubuntu precise main |sudo tee -a /etc/apt/sources.list
%>

*2.* Import the %(http://www.gnupg.org/, GPG) encryption key from Ubuntu so
that the Pi can verify the package's validity:

%code(lang=Bash)<
sudo apt-key adv --recv-keys --keyserver keyserver.ubuntu.com --recv-key 6C12C1CF
%>

*3.* Update your list of available packages (this may take a couple of
minutes):

%code(lang=Bash)<
  sudo apt-get update
%>

*4.* Install the package:

%code(lang=Bash)<
  sudo apt-get install simbamond
%>

And that's it!

Note: the above gets you the most recent stable release; if you want to live
on the edge, you can get more recent experimental builds by adding the
snapshot PPA to your sources list, e.g.:

%code(lang=Bash)<
echo deb http://ppa.launchpad.net/hamish-dcs/pi-gate-snapshots/ubuntu precise main |sudo tee -a /etc/apt/sources.list
%>


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%#measures
%1 Testing and Troubleshooting

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%2 The Longer Lasting Snack

So, how long will the batteries last?

My first test was a Model B Pi with almost no load (USB keyboard and mouse;
monitor attached over HDMI but switched off after starting the test; no
network or other peripherals). Using eight rechargeable Duracell AA NiMH 2400
mAh batteries (like
%(http://www.amazon.co.uk/Duracell-Rechargeable-Accu-2400-Batteries/dp/B0031OE6LG/ref=sr_1_2?ie=UTF8&qid=1375768484&sr=8-2&keywords=duracell+nimh,
these ones)) the Pi ran for 9 hours 31 minutes. Not bad! Especially when you
consider that the MoPi regulator supports hot-swap of new charged packs --
this looks very viable for mobile Pi applications of all shapes and sizes.

For comparison I set up the same rig with a USB battery pack from RS
(%(http://uk.rs-online.com/web/p/power-banks/7757508/, this one), a 5200 mAh
Lithium polymer model). The results were remarkably similar, with the RS pack
lasting for 9 hours and 21 minutes.

Since then we've conducted 101 different tests. There are two key factors in
battery life: *1.* Model A vs. Model B; *2.* the peripherals. To summarise:

- You can expect a Model A to get around double the life of a Model B.
- What you connect to the Pi makes a huge difference. For example: WiFi is a
  power hog: halve your expected battery life if you're using it. An
  accelerometer, in contrast, is cheap: e.g. %(http://www.piborg.com/xloborg,
  XLoBorg) won't reduce your running time by much at all.

%%% TODO more test results


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%2 Troubleshooting

In early testing we often reached states that caused error conditions of one
sort or another on the Pi. For example:

- the green indicator LED repeatedly blinks three times when the ^loader.bin^
  bootloader file is not present -- in our case this was because a hard
  power shutdown caused corruption of the SD card
- the red power indicator LED may blink if the battery charge is very low and
  it is failing to drive the Pi (and if the microcontroller is not properly
  shutting down the regulator)

In cases like these the Embedded Linux wiki page on
%(http://elinux.org/R-Pi_Troubleshooting, RPI troubleshooting) is your friend!
Another useful part of the Pi-oneer's toolkit is the excellent
%(http://www.raspberrypi.org/archives/4100, NOOBS) setup from the Pi
foundation, which makes it easier to restore your SD card after failures.

But inevitably the life of electronics prototyping brings its fair share of
mystery -- why have my GPIO monitoring pins all gone low, all of a sudden,
when the indicator LED and the microcontroller still work? Cue much head
scratching and serious faces. Followed by a session with the debug header and
the diagnostics rig on the microcontroller -- and it turns out that a single
page of memory (which happenned to contain the code running the IO pins) has
been wiped, presumably by power fluctuations at the low battery state. Time to
add some more diodes!

And here's a typical gotcha:

- Step 1: have the bright idea of reusing the _battery totally empty_ state
  for the _shutdown button pressed_ state.
- Step 2: implement the code changes in the daemon and install. Reboot.
- Step 3: oops, my Pi just shut down as soon as it started. Hmmm.
- Step 4: oh yeah, that's also the default state of the GPIO pins when the
  MoPi rig isn't connected. Ah. That means that my Pi is going to shutdown
  every time I start it up. And Lubo just took the prototype boards back to
  the lab. Um. Looks like the _Donkey of the Day_ award is coming my way
  again.
- Step 5: waste half an hour remembering how to mount the SD card read-write
  on another machine and manually editing the daemon.

We learn from our mistakes -- that's why I make as many as possible.

Finally, the current author has found it useful to run around in circles,
screaming and shouting. (It doesn't fix the electronics, of course, but if
you're lucky it generates sympathy in those around you, or at least a desire
on their part to give you a beer to shut you up.)


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%#howitworks
%1 How It Works

The MoPi circuitry consists of two parts: a single-chip microcontroller and a
five volt switching mode regulator. The microcontroller (with embedded
firmware) implements all the functions related to voltage level monitoring,
level signalling (via the LEDs and the GPIO interface), and on/off switching
of the +5V supply to the Pi. Battery voltage levels are measured using the
built-in microcontroller ADC%footnote(ADC: Analogue to Digital Converter.).

The schematic looks like this:

%image(images/mopi/schematic.png, An early MoPi schematic, 500, 292)

Two yellow LEDs are positioned next to the twin power pack inputs (screw
terminals), and indicate their status (blinking when either voltage is
critically low). The overall voltage level of both power inputs is indicated
by one RGB (three colour) LED and is also sent to the Raspberry Pi over the
I2C bus. The 5 volts to the Pi is generated by a highly efficient switch mode
voltage stabiliser, driven by the microcontroller. An open source daemon
running on the Pi listens to the I2C signal, informs the user of low battery
levels and shuts the Pi down cleanly when levels are critically low (or when
the power switch is pressed, or a delayed shutdown counter expires).

To start the 5V generator the power button should be pressed and held for 2
seconds. The microcontroller checks the voltage level of the attached battery
packs and if it is above the defined operating threshold, it switches the
stabiliser on to generate 5V for the Pi. The yellow LED for the battery (or
other) power input lights up, and the RGB LED lights up blue when the battery
pack is fully charged (or green if the voltage level is within the acceptable
operating range). The current voltage level is also accessible to the SimBaMon
daemon on the Pi via I2C.%footnote(Prior to version 4 a three-bit coded
voltage level is sent to the Pi over GPIO using %(http://wiringpi.com/,
WiringPi) pins 4, 5 and 6 (physical pins 16/18/22).). During operation, the
microcontroller continuously monitors the voltage level, and when it falls
beneath a safe level it switches the RGB LED to red. Simultaneously the yellow
LED for the low battery starts flashing, indicating that the pack needs
replacement.

Then the daemon SimBaMon on the Pi gets a low battery signal and informs the
user that they should either plug in another supply or shut down (again by
pressing the power button for 3 seconds). If nothing changes and the battery
continues to discharge down to a critical level, then the RGB LED starts
flashing red and MoPi forces a shutdown. If the user wishes to continue to
work and connects a new, charged battery pack (or other supply) to the second
connector within 30 seconds then the new battery will prevent the shutdown,
and the RGB LED will switch back to blue or green. The new input's
corresponding yellow LED will light up. The user can then remove the old
battery pack for charging.%footnote(Note: a flashing yellow LED for a low
supply will not reset until that supply has been disconnected for a minute or
so and then replaced with a good supply.)

Behaviour has to be adjusted for multiple battery chemistries; this is done
within the microcontroller firmware and can be configured from the Pi. MoPi
has two default discharging profiles pre-programmed -- one for NiMH
rechargeable batteries and one for ordinary Alkaline batteries. Out of the box
the NiMH profile is active; to choose the Akkaline profile, remove the small
jumper located on the under side of the board. The jumper applies to both
power inputs. The state of the jumper can be overridden via configuration from
the Pi, separately for each one of the power inputs. 

MoPi can be used as a UPS (Uninterruptible Power Supply). If the Pi is powered
over its 5V micro-USB socket and that power drops Pi while MoPi is active, it
will activate its supply in a few microseconds, allowing the Pi to continue
work uninterruped.


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%#batteries
%1 Batteries, Holders and Chargers

Here are links to some of the batteries, battery holders and chargers that
we've been testing MoPi with:

From %(http://rs-online.com/, RS Components):
- %(http://uk.rs-online.com/web/p/aa-rechargeable-batteries/6170773/,
  RS AA NiMH battery, 1.2V 2600 mAh)
- %(http://uk.rs-online.com/web/p/battery-chargers-aaa-aa-c-d-9-volt/0383241/,
  AA/AAA charger 250 mA)

From %(http://uk.farnell.com/, Farnell):
- %(http://uk.farnell.com/multicomp/bt00839/battery-holder-8xaa-pk5/dp/3829583,
  x8 AA battery holder)
- %(http://uk.farnell.com/duracell/5000394065710/battery-nimh-1-2v-2400mah-pk4/dp/1330278,
  Duracell AA NiMH 2400 mAh 4-pack)
- %(http://uk.farnell.com/energizer/635429/battery-precision-ni-mh-aa-2400mah/dp/2075715,
  Energiser AA NiMH 2400 mAh 4-pack)
- %(http://uk.farnell.com/ansmann/5107343-uk/charger-basic-4-plus/dp/1294240,
  x4 AA battery charger)

From %(http://maplin.co.uk/, Maplin):
- %(http://www.maplin.co.uk/extra-high-capacity-nimh-rechargeable-battery-value-packs-46414,
  NiMH AA 2400 mAh 8-pack)
- %(http://www.maplin.co.uk/hybrid-the-next-generation-rechargeable-battery-219932, 
  Hybrid AA 2100 mAh 4-pack)
- %(http://www.maplin.co.uk/batteries-and-power/batteries/battery-chargers, AA
  chargers)
- %(http://www.maplin.co.uk/aa-size-battery-holders-31427, x8 AA battery
  holder RK44X)

%%% TODO add RadioShack


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%#other
%1 Other Directions

For voltage regulation another option is a UBEC%footnote(UBEC stands for
Universal Battery Elimination Circuit, which is rather a misnomer as they're
often used to regulate battery supplies. Hey ho.) -- a device popular with
radio-controlled aircraft people, and hence nice and light-weight, and also
fairly cheap, e.g.:
%(http://www.giantshark.co.uk/hobbywing-3amp-ubec-p-402342.html, this one),
%(http://www.modelaccessories.co.uk/hobbywing-3amp-ubec.html, this one) or
%(http://www.hobbyking.co.uk/hobbyking/store/uh_viewItem.asp?idProduct=28160,
this one). UBECs are switched-mode regulators, just like our MoPi regulator
board, so they don't waste power when converting high DC to 5 volt DC.

Some other useful links about Pi battery projects: on
%(http://www.raspberrypi-spy.co.uk/2013/02/running-a-raspberry-pi-from-6-aa-batteries/,
Raspberry Spy); on the
%(http://www.raspberrypiforums.com/forums/tutorials/article/17-how-to-portably-power-your-raspberry-pi-with-a-battery/,
Raspberry Pi Forums).

%(http://www.amazon.co.uk/Raspberry-Pi-Manual-practical-revolutionary/dp/0857332953/,
Gray Girling's Pi owners' manual) also has a good discussion about battery
supplies and their subtleties (and is generally an excellent investment for
the Pi enthusiast).
